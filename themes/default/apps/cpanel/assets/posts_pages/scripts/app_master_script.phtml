<script>
"use strict";

$(document).ready(function($) {
	var _app = $('[data-app="about_settings"]');
	var _data = _app.find('form[data-an="form"]');

	_data.ajaxForm({
		url: '<?php echo cl_link("native_api/cpanel/save_settings_about"); ?>',
		type: 'POST',
		dataType: 'json',
		beforeSend: function() {
			_data.find('small.invalid-feedback').remove();
			_data.find('[data-an="submit-ctrl"]').attr('disabled', 'true').text("<?php echo cl_translate("
				Please wait "); ?>");
		},
		success: function(data) {
			if (data.status == 200) {
				cl_bs_notify("<?php echo cl_translate("
					Your changes have been saved successfully!"); ?>", 3000);
			} else {
				_data.find('[data-an="{0}-input"]'.format(data.err_field)).append($('<small>', {
					text: data.message,
					class: 'invalid-feedback animated flash'
				})).scroll2();
			}
		},
		complete: function() {
			_data.find('[data-an="submit-ctrl"]').removeAttr('disabled').text("<?php echo cl_translate("
				Save changes "); ?>");
		}
	});

});

$(document).on('change', '.inputImg', function(event) {
	console.log('Image changed');
	let file = event.target.files[0]; // Get the selected file
	console.log(file);
	if (file) {
		let reader = new FileReader();
		reader.onload = function(e) {
			window.uploadedFile = e.target.result;
			$('.thumbnail').attr('src', e.target.result).show(); // Set thumbnail src & display it
			console.log(e.target.result);
			console.log($(event.target).closest('.image-container').find('.thumbnail'));
		};
		reader.readAsDataURL(file); // Read file as Data URL
	}
});

$(document).ready(function($) {
	new Vue({
		el: ".vueCat",
		data: {
			submitting: false,
			posts: [],
			post_comments: [],
			categories: [],
			editObj: [],
			files: null,
			currentPage: 1,
			limit: 10,
			perPage: 10, // Items per page
			totalPages: 0,
			totalPosts: 0,
			videoLink: null,
			loading: false,
			name: "ahsan",
			open: false,
			search: {
				text: '',
				username: ''
			},
			searchLdr: false,
			clearsearch: false
		},
		computed: {
            firstPageLimit() {
              let rem = this.totalPosts % this.perPage;
              return rem === 0 && this.totalPosts > 0 ? this.perPage : rem;
            },
            pageOffset() {
              if (this.currentPage === 1) return 0;
              return this.firstPageLimit + this.perPage * (this.currentPage - 2);
            }
          },
		methods: {
			// new code 4 april

			previewFiles(event) {

				this.files = {};
				//   console.log(event.target.files);
				this.files = URL.createObjectURL(event.target.files[0])
				var $source = $('#imagePreview');
				//   console.log($source);
				$source[0].src = this.files;
				// $source.parent()[0].load();
			},
			removeVideo() {
				//   console.log(this);
				var fileInput = document.getElementById('fileInput');
				fileInput.value = ''; // Clear the value
				this.files = ''; // Clear the file source
			},
			videoLinkText(event) {
				this.videoLink = event.target.value.trim();
				console.log(event.target.value, this.videoLink)

			},
			formattedText(text) {
				// Regular expression to match links
				const urlPattern = /(https?:\/\/[^\s]+)/g;

				// Replace links in the text with anchor tags
				return text.replace(
					urlPattern,
					'<a href="$1" target="_blank" style="color: blue; text-decoration: underline;">$1</a>'
				);
			},
			changeLimit(event) {
				const limit = event.target.value; // Get the selected value
				this.limit = limit;
				this.getAllPosts()
			},
			
			getAllPosts(page = 1) {
				this.loading = true;
				this.currentPage = page;
				const limit = this.limit;
				$.get(`https://p-tweets.com/talk/native_api/cpanel/get_all_posts_admin?page=${page}&limit=${limit}`, (data) => {

					this.posts = data.data;
					this.totalPages = data.pagination.total_pages;
					this.totalPosts = data.pagination.total_posts;
					this.perPage = data.pagination.limit;
					this.loading = false;

					window.scrollTo({
						top: 0,
						behavior: 'smooth'
					});

				}).fail((error) => {
					console.error(error);
					this.loading = false;
				});
			},
			getPostComments(id) {
			    window.openedId = id;
				window.uploadedFile = '';
				this.loading = true;
				this.currentPage = 1;
				const limit = this.limit;
				$.get(`https://p-tweets.com/talk/native_api/cpanel/get_posts_comments_admin?post_id=${id}`, (data) => {
					console.log(data);
					this.loading = false;
					this.post_comments = data.data;

				}).fail((error) => {
					console.error(error);
					this.loading = false;
				});
			},
			hidePostComment(comment) {
				this.post_comments.map((val) => {
					console.log(val.publication_id, "val.publication_id");
					if (val.publication_id == comment.publication_id) {
						val.enable_edit = 0
					}
				})
			},
			editPostComment(comment) {
				console.log("edit post comment");
				console.log(comment);
				this.post_comments.map((val) => {
					console.log(val.publication_id, "val.publication_id");
					if (val.publication_id == comment.publication_id) {
						val.enable_edit = 1
					} else {
						val.enable_edit = 0
					}
				})
			},
			triggerFileInput() {
				$('.inputImg').click()
			},
			handleFileChange() {

			},
			deletePostImage(comment) {
			    
				window.uploadedFile = '';
				this.loading = true;
				this.currentPage = 1;
				const limit = this.limit;
				$.get(`https://p-tweets.com/talk/native_api/cpanel/delete_post_image?post_id=${comment.id}&thread=${comment.pub_id}`, (data) => {
					console.log(data);
					window.uploadedFile = '';
					this.loading = true;
					this.currentPage = 1;
					const limit = this.limit;
					$.get(`https://p-tweets.com/talk/native_api/cpanel/get_posts_comments_admin?post_id=${comment.thread_id}`, (data) => {
						console.log(data);
						this.loading = false;
						this.post_comments = data.data;

					}).fail((error) => {
						console.error(error);
						this.loading = false;
					});
				}).fail((error) => {
					console.error(error);
					this.loading = false;
				});
			},
			deletePostComment(comment) {
                // alert('deletePostComment')
                // alert(2);
                // thread_id is 
                let confirm = window.confirm("Are you sure you want to delete this reply?");
                if (confirm) {
                	let formData = new FormData();
    				formData.append("reply_id", comment.publication_id);
    				formData.append("publication_id", window.openedId);
    				
    				$.ajax({
    					url: "https://p-tweets.com/talk/native_api/cpanel/delete_posts_comments_admin",
    					type: "POST",
    					data: formData,
    					contentType: false,
    					processData: false,
    					success: (data) => {
                            console.log(comment);
                            // this.getPostComments(comment.thread_id);
                            this.getPostComments(window.openedId)
    					},
    					error: (error) => {
    						console.error("Error:", error);
    						this.loading = false;
    					}
				    }); 
                }
			},
			updatePostComment(comment) {
				let text = $('.editComment').val();
				let publication_id = comment.publication_id;
				let postId = comment.thread_id;
				let isYtLink = window.isYouTubeLink;
				let ytComment = $('.ytEditComment').val();
				let image = window.uploadedFile; // Base64 image

				let formData = new FormData();
				formData.append("publication_id", publication_id);
				formData.append("text", text);
				formData.append("post_id", postId);
				formData.append("yt_link", ytComment);
				formData.append("isYtLink", isYtLink);

				// If there is an image, convert Base64 to a Blob and append it
				if (image) {
					let blob = this.dataURItoBlob(image); // Convert Base64 to Blob
					formData.append("image", blob, "upload.png"); // Append file to FormData
				}

				$.ajax({
					url: "https://p-tweets.com/talk/native_api/cpanel/update_posts_comments_admin",
					type: "POST",
					data: formData,
					contentType: false,
					processData: false,
					success: (data) => {
						console.log("Response:", data);
						this.loading = false;
						this.post_comments = data.data;
						this.post_comments.map((val) => {
							val.enable_edit = 0;
						});
						this.getPostComments(window.openedId)
					},
					error: (error) => {
						console.error("Error:", error);
						this.loading = false;
					}
				});

				window.uploadedFile = ''; // Reset after upload
			},
			dataURItoBlob(dataURI) {
				let byteString = atob(dataURI.split(',')[1]);
				let mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
				let arrayBuffer = new ArrayBuffer(byteString.length);
				let uintArray = new Uint8Array(arrayBuffer);

				for (let i = 0; i < byteString.length; i++) {
					uintArray[i] = byteString.charCodeAt(i);
				}

				return new Blob([arrayBuffer], {
					type: mimeString
				});
			},
			showYtLink() {
				window.isYouTubeLink = 1;
				console.log("showYtLink");
				//   $('.editComment').hide();
				//   $('.ytIcon').hide();
				$('.ytEditComment').show();
			},
			goToPage(page) {
				if (page > 0 && page <= this.totalPages) {
					this.getAllPosts(page);
				}
			},
			closeModal() {
				$('.modal').modal('hide');
			},
			getAllCategories() {
				let that = this;
				$.get('https://p-tweets.com/talk/native_api/cpanel/get_all_categories', function(data) {
						// Handle the response data here
						console.log(data);
						that.categories = data.data;
					})
					.fail(function(error) {
						console.error(error);
					});
			},
			formatDate(timestamp) {
				const milliseconds = timestamp * 1000; // Convert to milliseconds
				const date = new Date(milliseconds);

				const options = {
					day: '2-digit', // Day as 2 digits
					month: 'short', // Short month name (e.g., 'Nov')
					year: 'numeric', // Full year (e.g., '2024')
				};

				// Format the date using toLocaleString
				const formattedDate = date.toLocaleDateString('en-US', options);
				return formattedDate;
			},

			// formatDate(timestamp){
			//     const milliseconds = timestamp * 1000;
			//                 const date = new Date(milliseconds);

			//                 const options = {
			//                   day: '2-digit',
			//                   month: 'short',
			//                   year: 'numeric',
			//                   hour: '2-digit',
			//                   minute: '2-digit',
			//                   hour12: true,
			//                 };

			//                 const formattedDate = date.toLocaleString('en-US', options);
			//                 return formattedDate;
			// },
			editUserPost(obj) {
				this.editObj = obj; // Assign the object to your data property

				// Set the modal input field value
				$('.id').val(this.editObj.id);

				// Open the modal programmatically
				$('#editModal').modal('show'); // For Bootstrap 4

				this.getPostComments(this.editObj.id);
				// If using Bootstrap 5, replace with:
				// const modal = new bootstrap.Modal(document.getElementById('editModal'));
				// modal.show();
			},
			deleteUserPost(obj) {
				let confirm = window.confirm('are you sure you want to delete this post?');
				let that = this;
				if (confirm) {
					$.get('https://p-tweets.com/talk/native_api/cpanel/delete_posts_data?id=' + obj.id, function(data) {
							// Handle the response data here
							console.log(data);
							that.getAllPosts();
						})
						.fail(function(error) {
							console.error(error);
						});
				}
			},
			updateUserPost() {
				console.log('updateUserPost');
				console.log(this.editObj);

				// Create a FormData object
				let formData = new FormData();

				// Append properties from this.editObj to formData
				Object.keys(this.editObj).forEach((key, val) => {
					console.log(key);
					console.log(this.editObj[key]);
					if (key != 'image') {
						formData.append(key, this.editObj[key]);
					}
				});

				// Append the image file to formData
				formData.append('image', this.editObj.image);

				// Make the AJAX request using fetch or XMLHttpRequest
				fetch('https://p-tweets.com/talk/native_api/cpanel/update_post', {
						method: 'POST',
						body: formData,
						// Headers may need adjustment based on server requirements
						headers: {
							'Content-Type': 'multipart/form-data', // Usually not needed with FormData
							// Add any other headers if required
						},
					})
					.then(response => response.json())
					.then(data => {
						// Handle the response data as needed
						console.log(data);
						// Call getAllPosts after a successful update
						this.getAllPosts();
					})
					.catch(error => {
						console.error('Error:', error);
					});

				// Make the AJAX request using $.ajax
				// $.ajax({
				//     url: 'https://p-tweets.com/talk/native_api/cpanel/update_post',
				//     type: 'POST',
				//     data: formData,
				//     processData: false,  // Don't process the data
				//     contentType: false,  // Don't set content type (jQuery will set it automatically)
				//     success: (data) => {
				//         console.log(data);
				//         // Call getAllPosts after a successful update
				//         this.getAllPosts();
				//     },
				//     error: (error) => {
				//         console.error('Error:', error);
				//     }
				// });
			},
			searchPost() {
				let that = this;
				that.searchLdr = true;
				$.get('https://p-tweets.com/talk/native_api/cpanel/search_all_posts_admin?username=' + that.search.username + '&text=' + that.search.text, function(data) {
						// Handle the response data here
						console.log(data);
						that.posts = data.data;
						that.loading = false;
						that.searchLdr = false;
						console.log(that.posts);
					})
					.fail(function(error) {
						// Handle the error here
						console.error(error);
					});
			},
			getImageUrl(image) {
				if (image.startsWith('http')) {
					return image;
				} else {
					return `https://p-tweets.com/talk/${image}`;
				}
			}
		},
		mounted: function() {
			console.log("mounted");
			this.getAllPosts();
			this.getAllCategories();
		}
	});
});
</script>